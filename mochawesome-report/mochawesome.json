{
  "stats": {
    "suites": 12,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2021-10-05T17:56:56.238Z",
    "end": "2021-10-05T17:56:58.168Z",
    "duration": 1930,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "68ef3841-eea6-4c8b-8d28-9a14eb7695d1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7e70e79-ba00-4371-a06c-d241e12a6be3",
          "title": "*********** AUTH ***********",
          "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\auth.js",
          "file": "\\test\\auth.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** AUTH ***********\"",
              "fullTitle": "*********** AUTH *********** \"after all\" hook in \"*********** AUTH ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach(async (id) => {\n    await user.destroy({ where: { id } })\n})",
              "err": {},
              "uuid": "5492a8dc-b37b-4227-9a0d-e12652d91818",
              "parentUUID": "d7e70e79-ba00-4371-a06c-d241e12a6be3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "cab4f632-75d5-4981-af67-42667b69b10c",
              "title": "/GET /404url",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\auth.js",
              "file": "\\test\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET 404 url",
                  "fullTitle": "*********** AUTH *********** /GET /404url it should GET 404 url",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .get('/404url')\n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.should.be.an('object')\n        done()\n    })",
                  "err": {},
                  "uuid": "7b6fc27b-ae42-4a29-bee3-c1a45b363429",
                  "parentUUID": "cab4f632-75d5-4981-af67-42667b69b10c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b6fc27b-ae42-4a29-bee3-c1a45b363429"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "16c00cfa-6617-4a08-bfad-a553b0d945f6",
              "title": "/POST login",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\auth.js",
              "file": "\\test\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET (token, user, permissions)",
                  "fullTitle": "*********** AUTH *********** /POST login it should GET (token, user, permissions)",
                  "timedOut": false,
                  "duration": 319,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/login')\n    .send(loginDetails)\n    .end((err, res) => {\n        res.should.have.status(202)\n        res.body.should.be.a('object')\n        res.body.should.include.keys('permissions', 'token', 'user')\n        res.body.permissions.should.be.a('array')\n        res.body.token.should.be.a('string')\n        res.body.user.should.be.a('object')\n        token = res.body.token\n        done()\n    })",
                  "err": {},
                  "uuid": "50acbe46-f788-4045-b0a8-fab8b27e0297",
                  "parentUUID": "16c00cfa-6617-4a08-bfad-a553b0d945f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST user does not exist",
                  "fullTitle": "*********** AUTH *********** /POST login it should NOT POST user does not exist",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/login')\n    .send(userNotExist)\n    .end((err, res) => {\n        res.should.have.status(404)\n        res.body.should.be.a('object')\n        res.body.should.include.keys('errors')\n        res.body.errors.msg.should.be.a('string')\n        done()\n    })",
                  "err": {},
                  "uuid": "9741e064-e1a5-4a92-9aaf-11a0c9a085bd",
                  "parentUUID": "16c00cfa-6617-4a08-bfad-a553b0d945f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST wrong password",
                  "fullTitle": "*********** AUTH *********** /POST login it should NOT POST wrong password",
                  "timedOut": false,
                  "duration": 149,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/login')\n    .send(wrongPassword)\n    .end((err, res) => {\n        res.should.have.status(403)\n        res.body.should.be.a('object')\n        res.body.should.include.keys('errors')\n        res.body.errors.msg.should.be.a('string')\n        done()\n    })",
                  "err": {},
                  "uuid": "93440f90-5ad2-4fb4-9121-8e04b0cf77bb",
                  "parentUUID": "16c00cfa-6617-4a08-bfad-a553b0d945f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST login if data its empty",
                  "fullTitle": "*********** AUTH *********** /POST login it should NOT POST login if data its empty",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/login')\n    .send({})\n    .end((err, res) => {\n        res.should.have.status(422)\n        res.body.should.be.a('object')\n        res.body.should.include.keys('errors')\n        res.body.errors.msg.should.be.a('array')\n        done()\n    })",
                  "err": {},
                  "uuid": "d0a09614-a467-41ca-bbf3-59e047254ad7",
                  "parentUUID": "16c00cfa-6617-4a08-bfad-a553b0d945f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50acbe46-f788-4045-b0a8-fab8b27e0297",
                "9741e064-e1a5-4a92-9aaf-11a0c9a085bd",
                "93440f90-5ad2-4fb4-9121-8e04b0cf77bb",
                "d0a09614-a467-41ca-bbf3-59e047254ad7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 493,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "005f963e-1deb-491a-8b40-ebfe23b961ae",
              "title": "/POST register",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\auth.js",
              "file": "\\test\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should POST register",
                  "fullTitle": "*********** AUTH *********** /POST register it should POST register",
                  "timedOut": false,
                  "duration": 246,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/register')\n    .send(userSend)\n    .end((err, res) => {\n        res.should.have.status(201)\n        res.body.should.be.an('object')\n        res.body.should.include.keys('token', 'user', 'permissions')\n        createdID.push(res.body.user.id)\n        done()\n    })",
                  "err": {},
                  "uuid": "52284993-d66a-4197-8033-4ad7309855ba",
                  "parentUUID": "005f963e-1deb-491a-8b40-ebfe23b961ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a register if email already exists",
                  "fullTitle": "*********** AUTH *********** /POST register it should NOT POST a register if email already exists",
                  "timedOut": false,
                  "duration": 155,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userSend.email = 'admin@admin.com'\nchai\n    .request(server)\n    .post('/register')\n    .send(userSend)\n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.should.be.a('object')\n        res.body.should.have.property('errors')\n        res.body.errors.msg.should.be.a('string')\n        done()\n    })",
                  "err": {},
                  "uuid": "a9fd6685-b04f-4e2b-845d-5c0ec28fab14",
                  "parentUUID": "005f963e-1deb-491a-8b40-ebfe23b961ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST register if data its empty",
                  "fullTitle": "*********** AUTH *********** /POST register it should NOT POST register if data its empty",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/register')\n    .send({})\n    .end((err, res) => {\n        res.should.have.status(422)\n        res.body.should.be.a('object')\n        res.body.should.have.property('errors')\n        res.body.errors.msg.should.be.a('array')\n        done()\n    })",
                  "err": {},
                  "uuid": "64de9582-99c0-4e37-83f7-8092f0d0a762",
                  "parentUUID": "005f963e-1deb-491a-8b40-ebfe23b961ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52284993-d66a-4197-8033-4ad7309855ba",
                "a9fd6685-b04f-4e2b-845d-5c0ec28fab14",
                "64de9582-99c0-4e37-83f7-8092f0d0a762"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 410,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "a24726c6-4e46-4276-ae92-ad3ec2610a3a",
              "title": "/GET token",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\auth.js",
              "file": "\\test\\auth.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** AUTH *********** /GET token it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .get('/token')\n    .end((err, res) => {\n        res.should.have.status(401)\n        done()\n    })",
                  "err": {},
                  "uuid": "5c7f6fe2-d7ab-466d-87d4-11d8e4332c90",
                  "parentUUID": "a24726c6-4e46-4276-ae92-ad3ec2610a3a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET a fresh token",
                  "fullTitle": "*********** AUTH *********** /GET token it should GET a fresh token",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .get('/token')\n    .set('Authorization', `Bearer ${token}`)\n    .end((err, res) => {\n        res.should.have.status(202)\n        res.body.should.be.an('object')\n        res.body.should.include.keys('permissions', 'token', 'user')\n        res.body.permissions.should.be.a('array')\n        res.body.token.should.be.a('string')\n        res.body.user.should.be.a('object')\n        done()\n    })",
                  "err": {},
                  "uuid": "4ba0a73d-31f6-4338-b96f-ca480664729f",
                  "parentUUID": "a24726c6-4e46-4276-ae92-ad3ec2610a3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c7f6fe2-d7ab-466d-87d4-11d8e4332c90",
                "4ba0a73d-31f6-4338-b96f-ca480664729f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "6648cf28-3553-49d8-b053-100c20f79338",
          "title": "*********** USERS ***********",
          "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\user.js",
          "file": "\\test\\user.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"*********** USERS ***********\"",
              "fullTitle": "*********** USERS *********** \"after all\" hook in \"*********** USERS ***********\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createdID.forEach(async (id) => {\n    await user.destroy({ where: { id } })\n})",
              "err": {},
              "uuid": "aa159ebe-3f3f-4786-bc00-421df3b7a8d8",
              "parentUUID": "6648cf28-3553-49d8-b053-100c20f79338",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "78f9605a-0fa8-4f7c-a5ac-9c3e73f1043f",
              "title": "/POST login",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\user.js",
              "file": "\\test\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET token",
                  "fullTitle": "*********** USERS *********** /POST login it should GET token",
                  "timedOut": false,
                  "duration": 158,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/login')\n    .send(loginDetails)\n    .end((err, res) => {\n        res.should.have.status(202)\n        res.body.should.be.a('object')\n        res.body.should.include.keys('permissions', 'token', 'user')\n        res.body.permissions.should.be.a('array')\n        res.body.token.should.be.a('string')\n        res.body.user.should.be.a('object')\n        token = res.body.token\n        done()\n    })",
                  "err": {},
                  "uuid": "ae3099e3-8f9b-4763-836b-7024d7ec077d",
                  "parentUUID": "78f9605a-0fa8-4f7c-a5ac-9c3e73f1043f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae3099e3-8f9b-4763-836b-7024d7ec077d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 158,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "4ef7289e-5e58-4422-979e-00dda70f0e26",
              "title": "/GET users",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\user.js",
              "file": "\\test\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT be able to consume the route since no token was sent",
                  "fullTitle": "*********** USERS *********** /GET users it should NOT be able to consume the route since no token was sent",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .get('/users')\n    .end((err, res) => {\n        res.should.have.status(401)\n        done()\n    })",
                  "err": {},
                  "uuid": "845c7f83-5db2-4a2c-a73f-aab80c61f6bb",
                  "parentUUID": "4ef7289e-5e58-4422-979e-00dda70f0e26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET all the users",
                  "fullTitle": "*********** USERS *********** /GET users it should GET all the users",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .get('/users')\n    .set('Authorization', `Bearer ${token}`)\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.should.be.an('object')\n        res.body.should.include.keys('docs', 'totalDocs', 'page', 'totalPages')\n        res.body.docs.should.be.a('array')\n        res.body.totalDocs.should.be.a('number')\n        res.body.page.should.be.a('number')\n        res.body.totalPages.should.be.a('number')\n        res.body.docs[0].name.should.be.a('string')\n        res.body.docs[0].lastname.should.be.a('string')\n        res.body.docs[0].email.should.be.a('string')\n        res.body.docs[0].createdAt.should.be.a('string')\n        res.body.docs[0].updatedAt.should.be.a('string')\n        res.body.docs[0].roleU.should.be.a('object')\n        res.body.docs[0].id.should.be.a('number')\n        res.body.docs[0].roleId.should.be.a('number')\n        res.body.docs[0].roleU.should.include.keys('name', 'description', 'createdAt', 'updatedAt')\n        done()\n    })",
                  "err": {},
                  "uuid": "91660c21-95ee-4ab1-bef8-1bf032a9db4a",
                  "parentUUID": "4ef7289e-5e58-4422-979e-00dda70f0e26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should GET the users with filters",
                  "fullTitle": "*********** USERS *********** /GET users it should GET the users with filters",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .get(`/users?${queryParams}`)\n    .set('Authorization', `Bearer ${token}`)\n    .end((err, res) => {\n        res.should.have.status(200)\n        res.body.should.be.an('object')\n        res.body.should.include.keys('docs', 'totalDocs', 'page', 'totalPages')\n        res.body.docs.should.be.a('array')\n        res.body.totalDocs.should.be.a('number')\n        res.body.page.should.be.a('number')\n        res.body.totalPages.should.be.a('number')\n        res.body.docs[0].name.should.be.a('string')\n        res.body.docs[0].lastname.should.be.a('string')\n        res.body.docs[0].email.should.be.a('string')\n        res.body.docs[0].createdAt.should.be.a('string')\n        res.body.docs[0].updatedAt.should.be.a('string')\n        res.body.docs[0].roleU.should.be.a('object')\n        res.body.docs[0].id.should.be.a('number')\n        res.body.docs[0].roleId.should.be.a('number')\n        res.body.docs[0].roleU.should.include.keys('name', 'description', 'createdAt', 'updatedAt')\n        res.body.docs[0].should.have.property('email').eql('admin@admin.com')\n        done()\n    })",
                  "err": {},
                  "uuid": "07828d59-b1c6-4009-b399-f8cc0a07fba0",
                  "parentUUID": "4ef7289e-5e58-4422-979e-00dda70f0e26",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "845c7f83-5db2-4a2c-a73f-aab80c61f6bb",
                "91660c21-95ee-4ab1-bef8-1bf032a9db4a",
                "07828d59-b1c6-4009-b399-f8cc0a07fba0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "8a1aa839-fd0e-44d4-a0ac-a9e2be74ef88",
              "title": "/POST user",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\user.js",
              "file": "\\test\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should NOT POST user if data its empty",
                  "fullTitle": "*********** USERS *********** /POST user it should NOT POST user if data its empty",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/users')\n    .set('Authorization', `Bearer ${token}`)\n    .send({})\n    .end((err, res) => {\n        res.should.have.status(422)\n        res.body.should.be.a('object')\n        res.body.should.have.property('errors')\n        res.body.errors.msg.should.be.a('array')\n        done()\n    })",
                  "err": {},
                  "uuid": "49745dd6-2db6-46b1-b52b-a935f6d0f68d",
                  "parentUUID": "8a1aa839-fd0e-44d4-a0ac-a9e2be74ef88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should POST a user",
                  "fullTitle": "*********** USERS *********** /POST user it should POST a user",
                  "timedOut": false,
                  "duration": 233,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n    .request(server)\n    .post('/users')\n    .set('Authorization', `Bearer ${token}`)\n    .send(userSend)\n    .end((err, res) => {\n        res.should.have.status(201)\n        res.body.should.be.a('object')\n        res.body.should.include.keys('id', 'name', 'lastname', 'roleId', 'email', 'updatedAt', 'createdAt')\n        res.body.id.should.be.a('number')\n        res.body.roleId.should.be.a('number')\n        res.body.name.should.be.a('string')\n        res.body.lastname.should.be.a('string')\n        res.body.email.should.be.a('string')\n        res.body.createdAt.should.be.a('string')\n        res.body.updatedAt.should.be.a('string')\n        createdID.push(res.body.id)\n        done()\n    })",
                  "err": {},
                  "uuid": "5f9babb5-d1fb-4ef7-8229-47ac3126a8de",
                  "parentUUID": "8a1aa839-fd0e-44d4-a0ac-a9e2be74ef88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT POST a user with email that already exists",
                  "fullTitle": "*********** USERS *********** /POST user it should NOT POST a user with email that already exists",
                  "timedOut": false,
                  "duration": 160,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userSend.email = 'admin@admin.com'\nchai\n    .request(server)\n    .post('/users')\n    .set('Authorization', `Bearer ${token}`)\n    .send(userSend)\n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.should.be.a('object')\n        res.body.should.have.property('errors')\n        res.body.errors.msg.should.be.a('string')\n        done()\n    })",
                  "err": {},
                  "uuid": "d13ebb59-e101-4299-a9d6-de803ce660c1",
                  "parentUUID": "8a1aa839-fd0e-44d4-a0ac-a9e2be74ef88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49745dd6-2db6-46b1-b52b-a935f6d0f68d",
                "5f9babb5-d1fb-4ef7-8229-47ac3126a8de",
                "d13ebb59-e101-4299-a9d6-de803ce660c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 411,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "0ced58cc-ce7f-45d7-bea0-8b2eb1c0e955",
              "title": "/GET/:id user",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\user.js",
              "file": "\\test\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should GET a user by the given id",
                  "fullTitle": "*********** USERS *********** /GET/:id user it should GET a user by the given id",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nchai\n    .request(server)\n    .get(`/users/${id}`)\n    .set('Authorization', `Bearer ${token}`)\n    .end((error, res) => {\n        res.should.have.status(200)\n        res.body.should.be.a('object')\n        res.body.should.have.property('id').eql(id)\n        res.body.should.include.keys('id', 'name', 'lastname', 'roleId', 'roleU', 'email', 'updatedAt', 'createdAt')\n        res.body.roleU.should.include.keys('name', 'description', 'createdAt', 'updatedAt')\n        res.body.id.should.be.a('number')\n        res.body.roleId.should.be.a('number')\n        res.body.name.should.be.a('string')\n        res.body.lastname.should.be.a('string')\n        res.body.email.should.be.a('string')\n        res.body.createdAt.should.be.a('string')\n        res.body.updatedAt.should.be.a('string')\n        done()\n    })",
                  "err": {},
                  "uuid": "195eba72-80a1-4be6-b612-1b87bdd76e17",
                  "parentUUID": "0ced58cc-ce7f-45d7-bea0-8b2eb1c0e955",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "195eba72-80a1-4be6-b612-1b87bdd76e17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "f7390a8c-1ba3-403d-93f5-f32810a7b3cf",
              "title": "/PATCH/:id user",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\user.js",
              "file": "\\test\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should UPDATE a user given the id",
                  "fullTitle": "*********** USERS *********** /PATCH/:id user it should UPDATE a user given the id",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nuserSend.name = 'user admin'\nconst { password, email, ...data } = userSend\nchai\n    .request(server)\n    .patch(`/users/${id}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(data)\n    .end((error, res) => {\n        res.should.have.status(201)\n        res.body.should.be.a('object')\n        res.body.should.have.property('id').eql(id)\n        res.body.should.have.property('name').eql('user admin')\n        res.body.should.include.keys('id', 'name', 'lastname', 'roleId', 'email', 'updatedAt', 'createdAt')\n        res.body.id.should.be.a('number')\n        res.body.roleId.should.be.a('number')\n        res.body.name.should.be.a('string')\n        res.body.lastname.should.be.a('string')\n        res.body.email.should.be.a('string')\n        res.body.createdAt.should.be.a('string')\n        res.body.updatedAt.should.be.a('string')\n        createdID.push(res.body.id)\n        done()\n    })",
                  "err": {},
                  "uuid": "499af149-0a02-4ae4-aa54-005c762467aa",
                  "parentUUID": "f7390a8c-1ba3-403d-93f5-f32810a7b3cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should NOT UPDATE a user with email that already exists",
                  "fullTitle": "*********** USERS *********** /PATCH/:id user it should NOT UPDATE a user with email that already exists",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = createdID.slice(-1).pop()\nuserSend.email = 'admin@admin.com'\nchai\n    .request(server)\n    .patch(`/users/${id}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(userSend)\n    .end((err, res) => {\n        res.should.have.status(400)\n        res.body.should.be.a('object')\n        res.body.should.have.property('errors')\n        res.body.errors.msg.should.be.a('string')\n        done()\n    })",
                  "err": {},
                  "uuid": "c086dabb-2d3a-4f93-a991-4bae3499c784",
                  "parentUUID": "f7390a8c-1ba3-403d-93f5-f32810a7b3cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "499af149-0a02-4ae4-aa54-005c762467aa",
                "c086dabb-2d3a-4f93-a991-4bae3499c784"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "5b15dfe5-0447-45a4-85c5-752e5bcd0aba",
              "title": "/DELETE/:id user",
              "fullFile": "C:\\Users\\artur\\Desktop\\TRABAJOS\\BE BETTER\\enligthneering\\api\\test\\user.js",
              "file": "\\test\\user.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should DELETE a user given the id",
                  "fullTitle": "*********** USERS *********** /DELETE/:id user it should DELETE a user given the id",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userSend.email = 'user@user.com'\nchai\n    .request(server)\n    .post('/users')\n    .set('Authorization', `Bearer ${token}`)\n    .send(userSend)\n    .end((err, res) => {\n        res.should.have.status(201)\n        chai\n            .request(server)\n            .delete(`/users/${res.body.id}`)\n            .set('Authorization', `Bearer ${token}`)\n            .end((error, result) => {\n                result.should.have.status(200)\n                done()\n            })\n    })",
                  "err": {},
                  "uuid": "a0f4b23e-f4a3-4e93-bd2d-bec46e30d820",
                  "parentUUID": "5b15dfe5-0447-45a4-85c5-752e5bcd0aba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0f4b23e-f4a3-4e93-bd2d-bec46e30d820"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.0"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}